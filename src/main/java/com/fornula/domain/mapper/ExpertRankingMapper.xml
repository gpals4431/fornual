<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper	namespace="com.fornula.domain.expert.mapper.java.ExpertRankingMapper">
	<!-- 전문가 랭킹 뽑기 이전 전문가들 리스트 출력 -->
	<select id="selectExpertList" resultType="Expert">
	    SELECT *
	    FROM (
	        SELECT rownum AS rn, expertlist.*
	        FROM (
	            SELECT
	                expert_idx
	                ,phone
	                ,interest
	                ,introduce
	                ,career
	                ,company_one
	                ,company_two
	                ,company_three
	            FROM expert 
	            ORDER BY expert_idx
	        ) expertlist
	    )
	    WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>
 
 	<!-- 페이징 처리를 위한 count 검색 쿼리  -->
 	<select id="selectExpertCount" resultType="int">
 		SELECT COUNT(*)
 		FROM expert
 	</select>
 	
 	<!-- 총금액 출력을 위한 쿼리문 -->
	<select id="selectTotalMoneyList" resultType="ExpertMoneyRanking">
	    SELECT *
	    FROM (
	        SELECT 
	            ROWNUM AS rn,
	            COALESCE(totalPrice, 0) AS totalPrice,
	            e.EXPERT_IDX,
	            e.INTEREST,
	            e.INTRODUCE
	        FROM
	            EXPERT e
	        LEFT JOIN
	            (
	                SELECT
	                    i.EXPERT_IDX,
	                    SUM(i.PRICE) AS totalPrice
	                FROM
	                    SALES s
	                JOIN
	                    ITEM i ON s.ITEM_IDX = i.ITEM_IDX
	                GROUP BY
	                    i.EXPERT_IDX
	            ) t ON e.EXPERT_IDX = t.EXPERT_IDX
	        ORDER BY
	            COALESCE(totalPrice, 0) DESC
	    )
	    WHERE totalPrice != 0
            AND rn BETWEEN 1 AND 3;
	</select>

	<!-- 총금액 출력을 위한 페이징 처리를 위한 count 검색 쿼리 
	<select id="selectMoneyCount" resultType="int">
	    <![CDATA[
	    SELECT COUNT(*) 
	    FROM (
	        SELECT 
	            ROWNUM AS rn,
	            e.EXPERT_IDX AS moneylist,
	            COALESCE(totalPrice, 0) AS totalPrice,
	            e.INTEREST,
	            e.INTRODUCE
	        FROM
	            EXPERT e
	        LEFT JOIN
	            (
	                SELECT
	                    i.EXPERT_IDX,
	                    SUM(i.PRICE) AS totalPrice
	                FROM
	                    SALES s
	                JOIN
	                    ITEM i ON s.ITEM_IDX = i.ITEM_IDX
	                GROUP BY
	                    i.EXPERT_IDX
	            ) t ON e.EXPERT_IDX = t.EXPERT_IDX
	        WHERE COALESCE(totalPrice, 0) <> 0
	    ) subquery_alias
	    ]]>
	</select>
	-->
 </mapper>
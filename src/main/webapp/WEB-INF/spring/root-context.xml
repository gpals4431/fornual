<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- root-context.xml : 모든 Front Controller에서 객체로 사용될 클래스를 Spring Bean으로 
		등록하기 위한 Spring Bean Configuration File -->
	<!-- => DAO 클래스 작성에 필요한 클래스를 Spring Bean으로 등록 -->
	<!-- => DataSource, SqlSessionFactory, SqlSession, TransactionManager 등 -->

	<!-- DataSource 관련 클래스(DriverManagerDataSource 클래스)를 Spring Bean으로 등록 -->
	<!-- => 필드에 Connection 객체를 생성하기 위한 값이 저장되도록 주입 - Setting Injection -->
	<bean
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		id="dataSource">
		<property name="driverClassName"
			value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="url"
			value="jdbc:log4jdbc:oracle:thin:@www.itwill.xyz:1521:xe" />
		<property name="username" value="fivejo1234" />
		<property name="password" value="whoiam212" />
	</bean>

	<!-- SqlSessionFa ctory 관련 클래스(SqlSessionFactoryBean 클래스)를 Spring Bean으로 
		등록 -->
	<!-- => 필드에 SqlSession 객체를 생성하기 위한 값(객체)이 저장되도록 값(객체) 주입 - Setter Injection -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean"
		id="sqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage"
			value="com.fornula.domain" />

		<!-- mapperLocations 필드에 List 객체를 생성하여 저장되도록 의존성 주입 -->
		<!-- => List 객체의 요소에는 XML 기반의 매퍼 파일의 경로를 저장 - 매퍼 등록 -->
		<!-- => Mybatis 환경설정파일의 mappers 엘리먼트(mapper 엘리먼트)와 유사한 기능 제공 -->
		<property name="mapperLocations">
			<list>
				<!-- [src/main/java] 폴더의 패키지에 작성된 모든 XML 파일을 매퍼로 등록되도록 처리 -->
				<value>classpath:com/fornula/domain/mapper/*.xml</value>
			</list>
		</property>
	</bean>

	<!-- SqlSession 관련 클래스(SqlSessionTemplate 클래스)를 Spring Bean으로 등록 -->
	<!-- => 필드에 SqlSession 객체(SqlSessionTemplate 객체)를 제공하기 위한 SqlSessionFactory 
		관련 클래스의 Spring Bean을 제공받아 의존성 주입 - Constructor Injection -->
	<!-- destroy-method 속성을 사용하여 Spring Bean 소멸전 clearCache 메소드를 자동 호출되도록 설정 -->
	<!-- => clearCache 메소드는 SqlSession 객체(SqlSessionTemplate 객체) 소멸전 SqlSession 
		객체에 의해 사용된 JDBC 관련 객체를 정리하는 메소드 -->
	<!-- => DAO 클래스의 메소드에서 SqlSession 객체를 사용한 후 close() 메소드를 호출하지 않도록 설정 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate"
		id="sqlSession" destroy-method="clearCache">
		<constructor-arg ref="sqlSessionFactoryBean" />
	</bean>

	<!-- TransactionManager 관련 클래스를 Spring Bean으로 등록 -->
	<!-- => Spring Bean의 식별자(beanName)을 반드시 [transactionManager]로 설정 -->
	<!-- => 필드에 TransactionManager에 의해 관리될 Connection 객체가 저장된 DataSource 관련 
		클래스의 Spring Bean을 제공받아 의존성 주입 - Setter Injection -->
	<bean
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		id="transactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="filterMultipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="20971520" />
		<property name="defaultEncoding" value="utf-8" />
	</bean>

	<!-- annotation-driven: @Transactional 어노테이션을 사용하여 TransactionManager 객체로 
		트랜젝션 처리 가능 -->
	<tx:annotation-driven />
</beans>